#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT SERVER
#         FILE: labadmin-script_server
#        USAGE: labadmin-script_server -h hostname -r repository_name -a list|get|exec_ok|exec_error [-s script] [-m exec_message]
#
#  DESCRIPTION: Labadmin script server manager
#               Manage actions to do: list pending scripts, show script code, save exec status (exec_ok or exec_error)
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2022.06
#      CREATED: 28.06.2022
#=================================================================================== 

#===============================================================================
#  GLOBAL VARIABLES
#===============================================================================
# Base path of scripts repositories dirs: linux, w7, w10, etc.
# Make sure ssh user has read permissions and write permission in log files!
readonly repositories_path=$(dirname "$(readlink -f "$0")")		




#=== FUNCTION ==================================================================
#        NAME: help
# DESCRIPTION: Show help and exit 
#  PARAMETERS:
#	$1	Exit code value
#===============================================================================
function help() {
	echo -e "Usage: $(basename "$0") -h hostname -r repository_name -a list|get|exec_ok|exec_error [-s script] [-m exec_message]"
	exit "$1"
}


#=== FUNCTION ==================================================================
#        NAME: check_params
# DESCRIPTION: Checks input parameters and load values
#  PARAMETERS:
#	$@	All parameter from command line
#===============================================================================
function check_params() {
	while getopts ":h:r:a:s:m:" option
	do		
		case $option in
		h)			
			readonly hostname="$OPTARG"
		;;
		r)
			readonly repository="$OPTARG"
			readonly repository_path="${repositories_path}/${repository}/"
		;;
		a)
			readonly action="$OPTARG"
		;;
		s)
			readonly script="$OPTARG"
		;;
		m) 
			readonly exec_msg="$OPTARG"
		;;
		?)
			echo "Incorrect option: $OPTARG"
			exit 2
		;;
	   esac
	done

	if [ $# -eq 0 ]; then
		help 1
	fi

	[ "$script" ] && readonly script_path="${repository_path}/${script}/"

	if [ ! "$hostname" ]; then
		echo "Hostname not present"
		help 2
	elif [ ! "$repository" ]; then
	    echo "Repository not present"
		help 2 
	elif [ ! "$action" ]; then
	    echo "Action not present"
		help 2  
	elif  [[ "$action" != @(list|get|exec_ok|exec_error) ]]; then
	    echo "Invalid action value"
		help 2  
	elif [[ "$action" = @(get|exec_ok|exec_error) ]] && [ ! "$script" ]; then
		echo "Script not present"
		help 2  
	elif [ ! -d "$repositories_path" ] || [ ! -r "$repositories_path" ]; then
		echo "Cant access repositories path: $repositories_path"
		exit 2
	elif [ ! -d "$repository_path" ] || [ ! -r "$repository_path" ]; then
		echo "Cant access repository path: $repository_path"
		exit 2
	fi
}


#=== FUNCTION ==================================================================
#        NAME: log
# DESCRIPTION: write in ${script_path}/log file using format: 
#              [DATE TIME] [HOSTNAME] [ACTION] EXEC_MSG
#  PARAMETERS:
#		$1: hostname
#		$2: action
#		$3: script path
#		$4: exec_msg
#===============================================================================
function log() {
    local hn="$1"
	local a="$2"
    local sp="$3"
    local em="$4"

	hn_width=8
	hn="[${hn^^}]$(seq -s" " 1 $(($hn_width-${#hn}))|tr -d "[0-9]") "
    a_width=11
    a="[${a^^}]$(seq -s" " 1 $(($a_width-${#a}))|tr -d "[0-9]") "
	
	echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] ${hn}${a}${em}" >> "${sp}/log"
}


#=== FUNCTION ==================================================================
#        NAME: action_list
# DESCRIPTION: List all pending scripts for hostname according script name and select script
#===============================================================================
function action_list() {
	IFS2="$IFS"; IFS=$'\n'
	for s in $(ls "$repository_path"); do
		# Check if hostname match with script REGEX
		re=$(echo "$s" | cut -f1 -d" ")		# RE -> script dir name before first space character
		[[ "$hostname" = $re ]] || continue	# If no match continue

		# Check if hostname is selected
		bash "${repository_path}/${s}/select" "$hostname" || continue
		
		# List script
		echo "$s"
	done
	IFS="$IFS2"
}


#=== FUNCTION ==================================================================
#        NAME: action_get
# DESCRIPTION: Show script code
#===============================================================================
function action_get() {
	# Show script
	exec_msg=$(cat "${script_path}/script" 2>&1)
	if [ $? -eq 0 ]; then
		log "$hostname" "$action" "$script_path"
		exit 0 
	else
		log "$hostname" "get_error" "$script_path" "${exec_msg//$'\n'/ \/ }"
		exit 1
	fi
}



#=== FUNCTION ==================================================================
#        NAME: action_exec_ok
# DESCRIPTION: Notify correct execution
#===============================================================================
function action_exec_ok() {
	log "$hostname" "$action" "$script_path" "$exec_msg"
}


#=== FUNCTION ==================================================================
#        NAME: action_exec_error
# DESCRIPTION: Notify error execution
#===============================================================================
function action_exec_error() {
	log "$hostname" "$action" "$script_path" "$exec_msg" 
}


##### CHECK PARAMETERS
check_params "$@"


##### EXEC ACTION
case "$action" in
	list)		action_list	;;
	get)		action_get	;;
	exec_ok)	action_exec_ok	;;
	exec_error)	action_exec_ok	;;
esac
