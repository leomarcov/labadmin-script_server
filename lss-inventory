#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT SERVER INVENTORY
#         FILE: lss-inventory
#        USAGE: lss-inventory ACTION [PARAMS...]
#
#  DESCRIPTION: Labadmin script server inventory to manage asociation of hostnames-MAC
#               Manage actions to do: show maps, get MAC->hostname and hostname->, get labadmin config files
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2024.10
#      CREATED: 2024.10.31
#=================================================================================== 


#===============================================================================
#  CONFIG VARIABLES
#===============================================================================
# Inventories repository path
readonly inventories_path="$(dirname "$(readlink -f "$0")")/inventories"

# Default inventory_path -> first *default*.inventory file in $invenrories_path or first *.inventory file
readonly inventory_path=$(ls "$inventories_path"/*default*.inventory "$inventories_path"/*.inventory 2>/dev/null | head -1)


if [ ! -r "$inventory_path" ] || [ ! -f "$inventory_path" ]; then
	echo "Cant access inventory file $inventory_path"
	exit 1
fi

#===============================================================================
#  LOAD CONFIG
#===============================================================================
declare -A LAB 					# LOC[lab_id] = lab long name
declare -A MODE					# MODE[lab_id] = default labadmin mode (ssh or winrm)
declare -A MAP 					# MAP[lab_id] = map host distribution
declare -A MAC 					# MAC[hostname] = mac address of hostname
declare -A HN 					# HN[lab_id] = lab hostname prefix
declare -A hosts_colors			# List of hosts selected to show un color
declare -A colors_hosts			# Count of hosts of each color
declare -A level_colors 		# level_clors[lab_id] = color code of each lab line in DIST variable
source ${inventory_path}		# Load inventory file


#===============================================================================
#  COLORS AND TEXT
#===============================================================================
S_R="\e[0m"            	# Reset all attributes
S_B="\e[1m"             # Style BOLD
S_D="\e[2m"             # Style DIM
S_U="\e[4m"            	# Style UNDERLINE
S_I="\e[7m"             # Style INVERTED
S_DL="\e[K"             # Style DELETE TO END OF LINE

cursor_save()		 { echo -en "\e[s"; }			# Cursor SAVE POSITION
cursor_restore()	 { echo -en "\e[u"; }			# Cursor RESTORE POSITION
cursor_hide()		 { echo -en "\e[?25l"; }		# Cursor HIDE CURSOR
cursor_show()		 { echo -en "\e[?25h"; }		# Cursor SHOW CURSOR
cursor_move-up()	 { echo -en "\e[${1}A"; }		# Cursor MOVE UP $1 LINES
cursor_move-down()	 { echo -en "\e[${1}B"; }		# Cursor MOVE DOWN $1 LINES
cursor_move-left()	 { echo -en "\e[${1}D"; }		# Cursor MOVE LEFT $1 COLS
cursor_move-right()  { echo -en "\e[${1}C"; }		# Cursor MOVE RIGHT $1 COLS
cursor_move-begin()  { echo -en "\r"; }             # Cursor MOVE BEGIN POSITION IN CURRENT LINE
cursor_move-pos()    { echo -en "\e[${1};${2}H"; }  # Cursor MOVE LINE $1 COL $2

C_D="\e[39m"            # Color DEFAULT
C_R="\e[31m"            # Color RED
C_BR="\e[1m\e[31m"      # Color BOLD RED
C_LR="\e[91m"           # Color LIGHT RED
C_G="\e[32m"            # Color GREEN
C_BG="\e[1m\e[32m"      # Color BOLD GREEN
C_LG="\e[92m"           # Color LIGHT GREEN
C_Y="\e[33m"            # Color YELLOW
C_BY="\e[1m\e[33m"      # Color BOLD YELLOW
C_LY="\e[93m"           # Color LIGHT YELLOW
C_B="\e[34m"            # Color BLUE
C_BB="\e[1m\e[34m"      # Color BOLD BLUE
C_LB="\e[94m"           # Color LIGHT BLUE
C_M="\e[35m"            # Color MAGENTA
C_BM="\e[1m\e[35m"      # Color BOLD MAGENTA
C_LM="\e[95m"           # Color LIGHT MAGENTA
C_C="\e[36m"            # Color CYAN
C_BC="\e[1m\e[36m"      # Color BOLD CYAN
C_LC="\e[96m"           # Color LIGHT CYAN
C_N="\e[90m"            # Color GREY
C_LN="\e[37m"           # Color LIGHT GREY
B_R="\e[41m"            # Background RED
B_G="\e[42m"            # Background GREEN
B_Y="\e[43m"            # Background YELLOW
B_B="\e[44m"            # Background BLUE
B_M="\e[45m"            # Background MAGENTA
B_C="\e[46m"            # Background CYAN
B_LG="\e[47m"           # Background LIGHT GREY
B_DG="\e[100m"          # Background DARK GREY
B_LR="\e[101m"          # Background LIGHT RED
B_LG="\e[102m"          # Background LIGHT GREEN
B_LY="\e[103m"          # Background LIGHT YELLOW
B_LB="\e[104m"          # Background LIGHT BLUE
B_LM="\e[105m"          # Background LIGHT MAGENTA
B_LC="\e[106m"          # Background LIGHT CYAN
B_W="\e[107m"           # Background LIGHT WHITE

# LAB COLORS ACCORDING GRID LINE
declare -A lab_color
level_color=("$C_G" "$C_LB" "$C_LY" "$C_D")
lab_color[" "]="${S_D}${C_N}"
l=0; for p in $(echo "$DIST" | tr -s " " "_"); do for lab in $(echo "$p" | tr -s "_" " "); do lab_color[$lab]=${level_color[$l]}; done; l=$((l+1)); done






#=== FUNCTION ==================================================================
# NAME: invetory_draw_map
# DESCRIPTION: draw single lab map on grid specific column
# PARAMS:
#  $1 	lab id to draw
#  $2	column
#  $3	width
#===============================================================================
function inventory_draw_map {
	local lab_id="$1"
	local c="$2"
	local w="$3"
	local map="${MAP[$lab_id]}"
	[ ! "$map" ] && lab_id=" "

	# Print header
	cursor_move-begin; cursor_move-right "$c"
	echo -e "${lab_color[$lab_id]}${S_D}┌$(seq -s"─" $(($w+1))| tr -d "[0-9]")┐${S_R}";
	cursor_move-right "$c"
	echo -e "  ${S_B}${lab_id:0:$(($w-2))}${S_R}";
	cursor_move-right "$c"
	echo -e "${lab_color[$lab_id]}${S_D}└$(seq -s"─" $(($w+1))| tr -d "[0-9]")┘${S_R}";	
	local l=3

	# Print map
	map=$(echo "$map" | sed '/^$/d' )
	c=$((c+1))

	while read r; do
		cursor_move-right "$c"
		for h in $r; do
			if [ "$h" -eq "$h" ] &>/dev/null; then
				hn="${HN[$lab_id]}${h}"
				mac=${MAC["$hn"]}
				# Red ID (MAC not found in config file)
				if [ ! "$mac" ]; then 
					color="${S_D}";
				# Color host
				elif [ "${hosts_colors["$hn"]}" ]; then 
					color="${hosts_colors["$hn"]}"
					count_hosts_sel=$((count_hosts_sel+1))
					colors_hosts["$color"]=$((${colors_hosts["$color"]}+1))
				# White ID (MAC not found in arp file)
				else 
					color="${S_R}"
					count_hosts_unsel=$((count_hosts_unsel+1))
				fi
				[[ "$h" = 00 ]] && color="${color}${S_B}"
				echo -en "${color}$h${S_R} "
			else 
				echo -en "${S_D}$h${S_R} "
			fi
		done
		echo
		l=$((l+1))
	done <<<$(echo "$map")
	cursor_move-up $l
}


#=== FUNCTION ==================================================================
# NAME: inventory_calculate_grid_size
# DESCRIPTION: calculate DIST sizes (column widths and file heights)
# PARAMS:
#  $1 	DIST 
#
# GLOBAL VARIABLES:
#  $grid_file_height[]		
#  $grid_column_width[]
#  $grid_total_width
#  $grid_total_height
#===============================================================================
function inventory_calculate_grid_size() {
	local DIST="$1"
	local dist_l=1 dist_c=1
	unset grid_file_height grid_column_width grid_total_width grid_total_height; grid_total_height=3

	# Loop each file and columns of DIST 
	for p in $(echo "$DIST_CURRENT" | tr -s " \t" '$'); do for lab in $(echo "$p" | tr -s '$' " "); do  	
		h=$(echo "${MAP[$lab]}" | wc -l)	# current lab height
		w=$(echo "${MAP[$lab]}" | wc -L)	# current lab width
		[ "$w" -lt 12 ] && w=12				# min  lab width
		[ ${grid_file_height[$dist_l]:-0} -lt $h ] && grid_file_height[$dist_l]=$h
		[ ${grid_column_width[$dist_c]:-0} -lt $w ] && grid_column_width[$dist_c]=$w
		dist_c=$((dist_c+1))
	done
		grid_total_height=$((grid_total_height+3+grid_file_height[$dist_l]))
		dist_l=$((dist_l+1)); dist_c=1
	done
	grid_total_width=$(($(echo ${grid_column_width[*]} | tr " " "+")+${#grid_column_width[*]}*3))
}


#=== FUNCTION ==================================================================
# NAME: print_map_grid
# DESCRIPTION: draw inventory lab maps grid
#===============================================================================
function inventory_draw_grid {
	clear

	# CALCULATE GRID SIZE
	DIST_CURRENT="$DIST"
	inventory_calculate_grid_size "$DIST_CURRENT"

	# NOT ENOUGHT COLUMNS! -> ADJUST DIST TO WIDTH
	if [ "$COLUMNS" -lt $grid_total_width ]; then
		grid_max_width=$(echo ${grid_column_width[*]} | tr " " "\n" | sort -n | tail -1)
		grid_cols=$((COLUMNS/grid_max_width))
		DIST_CURRENT=$(i=0; for l in $DIST; do i=$((i+1)); echo -n "$l "; [ $((i%grid_cols)) -eq 0 ] && echo ; done)
		inventory_calculate_grid_size "$DIST_CURRENT"
	fi

	# SHOW TITLE
	count_hosts_sel=0
	count_hosts_unsel=0
	count_maps=0
	header_widht=65; [ "$header_widht" -lt $grid_total_width ] && header_widht=$grid_total_width
	echo -e "${S_D}┌$(seq -s"─" $(($header_widht))| tr -d "[0-9]")┐"
	echo -en "│  ${S_R}${S_B}LABADMIN   ${S_R}${S_D}|${S_R}  $TITLE${S_R}${S_D}"; cursor_move-begin; cursor_move-right $((header_widht)); echo -e "${S_D}│"; 
	echo -e "${S_D}└$(seq -s"─" $(($header_widht))| tr -d "[0-9]")┘"

	# PRINT MAPS
	local dist_l=1 dist_c=1 c=1
	for p in $(echo "$DIST_CURRENT" | tr -s " \t" '$'); do for lab in $(echo "$p" | tr -s '$' " "); do 
		count_maps=$((count_maps+1))
		[ $dist_c -gt 1 ] && c=$((c+3+grid_column_width[$((dist_c-1))]))
		inventory_draw_map $lab $c ${grid_column_width[$dist_c]}
		dist_c=$((dist_c+1))
	done
		seq $((3+grid_file_height[$dist_l])) | tr -d "[0-9]"
		dist_l=$((dist_l+1)); dist_c=1; c=1;
	done

	# SHOW COUNTS IN HEADER 
	if [ "$LINES" -ge "$grid_total_height" ]; then	
		cursor_save; cursor_move-pos 2 $((19+${#TITLE}))
		echo -en " ${S_R}${S_D}|  ${count_maps} maps · $((count_hosts_sel+count_hosts_unsel)) hosts " 
		if [ "${hosts_colors[*]}" ]; then
			echo -n "("
			for c in "${!colors_hosts[@]}"; do 
				echo -en "${S_R}${c}${colors_hosts["$c"]}${C_D}${S_D}·"
			done
			echo -e "${S_R}${C_D}${count_hosts_unsel}${S_D}${C_D})"
		fi
		cursor_restore
	fi
}

#=== FUNCTION ==================================================================
#        NAME: action_map
# DESCRIPTION: draw map
#  PARAMETERS:
#    -S                      Check network and hightlight online hosts 
#    -d <LAB DIST>           Show only list of LABS
#    -D <LAB RE>             Show only LABS matches with RE
#    -g <HOST LIST>          Hightlight green HOST LIST (space separated)
#    -b <HOST LIST>          Hightlight blue HOST LIST (space separated)
#    -y <HOST LIST>          Hightlight yellow HOST LIST (space separated)
#    -r <HOST LIST>          Hightlight red HOST LIST (space separated)
#===============================================================================
function action_map() {
	# Check action_map params
	while getopts ":d:g:r:b:y:D:S" option; do
		case $option in
		S)
			echo -n "Scaning network..."
    		arp_out="$(arp-scan -l  -q -r 1 -N 2>/dev/null)"
			[ $? -ne 0 ] && { echo "! Failed to scan network hosts (arp-scan exit error)" 1>&2; exit 1; }
    		echo "  Complete!"
			echo "Generating map..."
			for h in "${!MAC[@]}"; do
				echo "$arp_out" | grep -qi "${MAC["$h"]}" && hosts_colors["$h"]="${S_B}${C_LG}"
			done
		;;
		d)
			d_flag="true"
			DIST="$OPTARG"
		;;
		D)
			D_flag="true"
			local re="$OPTARG"
			if [ "$re" ] && [ "$re" != "*" ]; then
				local DIST2=""
				for d in $DIST; do
					[[ "${HN["$d"]}" = $re ]] && DIST2="${DIST2} $d"
				done
				[ "$DIST2" ] && DIST="$DIST2"
			fi
		;;
		g) 
			G_flag="true"
			for h in $OPTARG; do
				hosts_colors["$h"]="${S_B}${C_LG}"
			done
		;;
		b) 
			B_flag="true"
			for h in $OPTARG; do
				hosts_colors["$h"]="${S_B}${C_B}"
			done
		;;
		y) 
			Y_flag="true"
			for h in $OPTARG; do
				hosts_colors["$h"]="${S_B}${C_Y}"
			done
		;;
		r) 
			R_flag="true"
			for h in $OPTARG; do
				hosts_colors["$h"]="${S_B}${C_R}"
			done
		;;
		?)
			echo "Incorrect option: $OPTARG"
			exit 2
		;;
	   esac
	done

	# Draw grid
	inventory_draw_grid
}



#=== FUNCTION ==================================================================
#        NAME: action_labadmin-conf
# DESCRIPTION: show labadmin config file for specific lab id
#  PARAMETERS:
#	$1		labid
#	[$2]	$2=-nohost0 skip host 0 MAC and map
#===============================================================================
function action_labadmin-conf() {
	local lab="$1"
	local skip_host0=""; [ "$2" = "-nohost0" ] && skip_host0="true"

	# Check lab exists
	if [ ! "$lab" ] || [ ! "${LAB["$lab"]}" ]; then
		echo "No lab found ${lab//\/\//\/}"
		return 1
	fi

	# Header + labname + srvmode
	echo "#!/usr/bin/env bash
#===================================================================================
#        FILE: ${lab}
# DESCRIPTION: Lab config file autogenerated by lss-inventory
#      AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#     LICENSE: GNU General Public License v3.0
#===================================================================================

# Lab name
labname='${LAB["$lab"]}'

# Server default mode (winrm for Windows or ssh for Linux)
srvmode='${MODE["$lab"]}'
"

	# Macs
	echo "# List of hosts MACs"
	for h in "${!MAC[@]}"; do					# hostname     (e.g. A11PC33)
		local hn="${HN["$lab"]}"				# lab hostname (e.g. A11PC)
		local m="${MAC[$h]}"					# host mac
		[[ "$h" != "$hn"* ]] && continue		# Skip hostnames not match current lab (e.g. A11PC*)
		local n=$((10#${h#${hn}*}))	|| exit 1	# host number in lab (e.g. 33)
		[ "$skip_host0" ] && [ "$n" -eq 0 ] && continue
		echo "macs["$n"]='${m}'"
	done | sort -n -k 2 -t '['
	echo

	# Map
	echo "# Lab distribution map"
	local map=$(echo "${MAP["$lab"]}" | sed -E 's/\b0+([1-9][0-9]*)\b/ \1/g' | sed -E 's/\b0+0\b/ 0/g')
	[ "$skip_host0" ] && map=$(echo "$map" | sed -E 's/\b0+\b//g' | sed '/[0-9]/!{/./d}')
	echo "map='$map'"
	echo
}



#=== FUNCTION ==================================================================
#        NAME: action_get-labs
# DESCRIPTION: get list of available labs
#===============================================================================
function action_get-labs() {
	echo "$DIST" | tr -s $'\n _' " " | tr " " $'\n'
}


#=== FUNCTION ==================================================================
#        NAME: action_get-hosts
# DESCRIPTION: get list of available hosts
#===============================================================================
function action_get-hosts() {
	echo "${!MAC[@]}"
}


#=== FUNCTION ==================================================================
#        NAME: action_get-MAC
# DESCRIPTION: get MAC from a hostname
#  PARAMETERS:
#	$1	hostname to get MAC
#===============================================================================
function action_get-mac() {
	local hn="$1"
	local m="${MAC["$hn"]}"

	if [ "$m" ]; then
		echo "$m"
		return 0
	else
		echo "No MAC found for hostname $hn" 1>&2
		return 1
	fi
}

#=== FUNCTION ==================================================================
#        NAME: action_get-hostname
# DESCRIPTION: get hostname from a MAC
#  PARAMETERS:
#	$1	MAC to get hostname
#===============================================================================
function action_get-hostname() {
	local m=$(echo "${1,,}" | tr "-" ":")
	for hn in "${!MAC[@]}"; do
		cm="${MAC["$hn"]}"
		if [ "${cm,,}" = "${m}" ]; then
			echo "$hn"
			return 0
		fi
	done
	echo "No hostname found for MAC $m" 1>&2
	return 1
}

#=== FUNCTION ==================================================================
#        NAME: action_get-epoch
# DESCRIPTION: get epoch seconds from inventory file last modification time
#===============================================================================
function action_get-epoch() {
	date -d "$(stat -c %y "$inventory_path")" +%s
}


#=== FUNCTION ==================================================================
#        NAME: action_help
# DESCRIPTION: action_h alias
#===============================================================================
function action_help() {
	action_h
}

#=== FUNCTION ==================================================================
#        NAME: action_help
# DESCRIPTION: action to show help
#===============================================================================
function action_h() {
	echo -e "LABADMIN INVENTARY MANAGER

${S_B}USAGE${S_R}
  $(basename "$0")${S_R} ACTION [PARAMS...]

${S_B}ACTIONS${S_R}
    ${S_B}help${S_R}                      Show help
    ${S_B}map [PARAMS...]${S_R}           Show maps grid hosts
        ${S_B}-S${S_R}                      Check network and hightlight online hosts 
        ${S_B}-d <LAB DIST>${S_R}           Show only list of LABS
        ${S_B}-D <LAB RE>${S_R}             Show only LABS matches with RE
        ${S_B}-g <HOST LIST>${S_R}          Hightlight green HOST LIST (space separated)
        ${S_B}-b <HOST LIST>${S_R}          Hightlight blue HOST LIST (space separated)
        ${S_B}-y <HOST LIST>${S_R}          Hightlight yellow HOST LIST (space separated)
        ${S_B}-r <HOST LIST>${S_R}          Hightlight red HOST LIST (space separated)

    ${S_B}get-mac <hostname>${S_R}        Get mac from hostname
    ${S_B}get-hostname <MAC>${S_R}        Get hostname from mac
    ${S_B}get-labs${S_R}                  Get list of labs
    ${S_B}get-hosts${S_R}                 Get list of hosts
    ${S_B}get-epoch${S_R}                 Get epoch seconds from inventory file last modification time 

    ${S_B}labadmin-conf <LAB>${S_R}       Get labadmin lab config file for LAB
        ${S_B}-nohost0${S_R}                Skip host 0
    "
}



#=== FUNCTION ==================================================================
#        NAME: exec_action
# DESCRIPTION: exec function of selected action
#===============================================================================
function exec_action() {
	action_function="action_${action}"
	if [ ! "$action" ] || [ "$(type -t "$action_function")" != "function" ]; then
		[ "$action" ] && echo -e "  Unrecognized action: $action" || action_h
		exit 1
	fi
	"$action_function" "$@"
}

# EXEC FUNCTION ACTION
action="$1"; shift 
exec_action "$@"
