#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT SERVER
#         FILE: lss-srv
#        USAGE: lss-srv -h hostname -M mac -r repository_name -a list|get|exec_ok|exec_error [-s script] [-m exec_message]
#
#  DESCRIPTION: Labadmin Script Server
#               Manage actions to do: list pending scripts, print script code, save exec status (exec_ok or exec_error)
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2024.11
#      CREATED: 2022.06.28
#=================================================================================== 

#===============================================================================
#  GLOBAL VARIABLES
#===============================================================================
readonly lss_path=$(dirname "$(readlink -f "$0")")			# LSS root path
readonly lssinventory_path="${lss_path}/lss-inventory"		# lss-inventory executable path

unset log_mail												# log mail                        (loaded in config file)
unset check_hostnames										# enable/disable check hostnames  (loaded in config file)
unset repositories_path										# repositories path               (loaded in config file)

unset hostname												# hostname parameter
unset hostname_inventory									# hostname get from lss-inventory matching with mac
unset hostname_match										# hostname parameter matches with hostname inventory
unset mac													# mac parameter
unset repository											# repository parameter
unset repository_path										# repository path
unset action												# action parameter
unset script												# script parameter
unset script_path											# script path
unset exec_msg												# exec_msg parameter


#===============================================================================
#  LOAD CONFIG
#===============================================================================
source "${lss_path}/config"									# LOAD CONFIG VARIABLES




#=== FUNCTION ==================================================================
#        NAME: help
# DESCRIPTION: Print help and exit 
#  PARAMETERS:
#	$1	Exit code value
#===============================================================================
function help() {
	echo -e "Usage: $(basename "$0") -h hostname -M mac -r repository_name -a list|get|exec_ok|exec_error [-s script] [-m exec_message]"
	exit "$1"
}


#=== FUNCTION ==================================================================
#        NAME: check_params
# DESCRIPTION: Checks input parameters and load values
#  PARAMETERS:
#	$@	All parameter from command line
#===============================================================================
function check_params() {
	while getopts ":h:M:r:a:s:m:" option
	do		
		case $option in
		h)			
			readonly hostname="$OPTARG"
		;;
		M)
			readonly mac=$(echo "${OPTARG,,}" | tr "-" ":")
		;;
		r)
			readonly repository="$OPTARG"
			readonly repository_path="${repositories_path}/${repository}/"
		;;
		a)
			readonly action="$OPTARG"
		;;
		s)
			readonly script="$OPTARG"
			readonly script_path="${repository_path}/${script}"
		;;
		m) 
			readonly exec_msg="$OPTARG"
		;;
		?)
			echo "Incorrect option: $OPTARG"
			exit 2
		;;
	   esac
	done													

	# EMPTY MAC: allowed for agent backwards compatibility
	[ ! "$mac" ] && { mac="00:00:00:00:00:00"; unset check_hostnames; }				

	if [ $# -eq 0 ]; then
		help 1
	elif [ ! "$hostname" ]; then
		echo "Hostname not present"
		help 2
	elif [ "${mac#[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]}" ]; then
		echo "Incorrect MAC or not present"
		help 2
	elif [ ! "$repository" ]; then
	    echo "Repository not present"
		help 2 
	elif [ ! "$action" ]; then
	    echo "Action not present"
		help 2  
	elif  [[ "$action" != @(list|get|exec_ok|exec_error) ]]; then
	    echo "Invalid action value"
		help 2  
	elif [[ "$action" = @(get|exec_ok|exec_error) ]] && [ ! "$script" ]; then
		echo "Script not present"
		help 2  
	elif [ ! -d "$repositories_path" ] || [ ! -r "$repositories_path" ]; then
		echo "Cant access repositories path: $repositories_path"
		exit 2
	elif [ ! -d "$repository_path" ] || [ ! -r "$repository_path" ]; then
		echo "Cant access repository path: $repository_path"
		exit 2
	elif [ "$script" ] && ([ ! -d "$script_path" ] || [ ! -r "$script_path" ]); then
		echo "Cant access script path: $script_path"
		exit 2
	fi
}


#=== FUNCTION ==================================================================
#        NAME: log
# DESCRIPTION: write in ${script_path}/log file using format: [DATE TIME] [MAC] [HOSTNAME] [ACTION] EXEC_MSG
#			   and send mail log
#  PARAMETERS:
#		$1: mac
#		$2: hostname
#		$3: action
#		$4: script path
#		$5: exec_msg
#===============================================================================
function log() {
	local m="$1"                      # mac
	local hn="$2"                     # hostname
	local a="$3"                      # action
	local sp="$4"                     # script path
	local em="$5"                     # exec message
	local sn=$(basename "$sp")        # script name
	
	# Save file log
	[ ! "$sp" ] && sp="${lss_path}"			# Save script log or lss log
	local d=$(date "+%Y-%m-%d_%H:%M:%S") pad10="          " pad12="           " 
	echo -e "[${d}] [${m}] [${hn^^}]${pad10:${#hn}}[${a^^}]${pad12:${#a}} ${em}" >> "${sp}/log"

	# Send mail log
	if [[ "${a,,}" = *error* ]]; then
		echo -e "Date:\t\t$(date "+%Y-%m-%d %H:%M:%S")\nMAC:\t\t${m}\nHostname:\t${hn}\n$([ "$sn" ] && echo "Script:\t\t${sn}\n")Action:\t\t${a}\nError msg:\t${em}" | mail -s "【script-server】【$sn】" -a "From: ${hn}<${hn}@carlos3.com>" "$log_mail"
	fi
}


#=== FUNCTION ==================================================================
#        NAME: get_hostname_inventory
# DESCRIPTION: Get hostname from inventory given MAC and write in global variable hostname_inventory
#              and check if matches with hostname parameter
#  PARAMETERS:
#		$1: mac
#
# GLOBAL VARIABLES MODIFIED
#		$hostname_inventory		hostname inventory name for given mac
#		$hostname_match			no empty if hostname parameter matches with hostname inventory
#
# EXIT CODE
#		0 if found hostname for mac
#		1 if not found hostname for mac
#===============================================================================
function get_hostname_inventory() {
	local m="$1"
	unset hostname_inventory hostname_match
	
	# Call to lss-inventory
	hostname_inventory=$(bash "${lssinventory_path}" get-hostname "$m"); local r=$?

	# Update hostname_match
	[ "$hostname" = "$hostname_inventory" ] && hostname_match="true"

	return $r
}


#=== FUNCTION ==================================================================
#        NAME: action_list
# DESCRIPTION: List all pending scripts for hostname according script name and select script
#===============================================================================
function action_list() {
	# GET INVENTORY HOSTNAME (exit on error)
	if [ "$check_hostnames" ]; then
		get_hostname_inventory "$mac" || { log "$mac" "$hostname" "LIST_ERROR" "" "Error inventory get-hostname for mac: $m"; exit 1; }
	fi

	# LIST PENDING SCRIPTS
	IFS2="$IFS"; IFS=$'\n'
	local list="" priority_list=""
	for s in $(ls "$repository_path"); do
		local sre="${s%% *}"						# script regular expresión (script dir name before first space)
		local sn="${s#* }"							# script name (script dir name afetr first space)
		local sp="${repository_path}/${s}"			# script path
		
		# Check intentory hostname script
		[ ! "$check_hostnames" ] && [ -e "${sp}/hostname" ] && continue										# check_hostnames disabled -> skip hostname script
		[ "$check_hostnames" ]   && [ ! "$hostname_match" ] && [ ! -e "${sp}/hostname" ] && continue		# check_hostnames enabled  -> skip all excep hostname script if no hostname-mac match

		# Check hostname match with script REGEX
		[[ "${hostname,,}" = ${sre,,} ]] || continue		# If no match continue

		# Check script is disabled
		[ -e "${sp}/disable" ] && continue		

		# Check hostname is selected
		bash "${sp}/select" "$hostname" "$mac" "$hostname_inventory" || continue

		# Check priority script
		[ "$priority_list" ] && [ ! -e "${sp}/priority" ] && continue
		[ ! "$priority_list" ] && [ -e "${sp}/priority" ] && { priority_list="true"; unset list; }

		# Add script to list
		list="${list}${list:+$'\n'}${s}"
	done
	IFS="$IFS2"

	# Print selected scripts list
	echo "$list"

	# Log list
	log "$mac" "$hostname" "LIST" "" "|${list//$'\n'/|}|"
}


#=== FUNCTION ==================================================================
#        NAME: action_get
# DESCRIPTION: Print script code, log action and exit
#===============================================================================
function action_get() {
	local m=""
	
	# PRINT HOSTNAME SCRIPT -> replace in script code LSS-HOSTNAME-REPLACE for MAC
	if [ -e "${script_path}/hostname" ]; then
		get_hostname_inventory "$mac" || { log "$m" "$hostname" "get_error" "$script_path" "Error inventory get-hostname for mac: $m"; exit 1; }
		cat "${script_path}/script" | sed "s/LSS-HOSTNAME-REPLACE/${hostname_inventory}/g" 2>&1
		m="${hostname} -> ${hostname_inventory}"

	# PRINT REGULAR SCRIPT
	else
		cat "${script_path}/script" 2>&1
	fi

	if [ $? -eq 0 ]; then
		log "$mac" "$hostname" "$action" "$script_path" "$m"
		exit 0 
	else
		log "$mac" "$hostname" "get_error" "$script_path" "$m"
		exit 1
	fi
}



#=== FUNCTION ==================================================================
#        NAME: action_exec_ok
# DESCRIPTION: Notify correct execution
#===============================================================================
function action_exec_ok() {
	log "$mac" "$hostname" "$action" "$script_path" "$exec_msg"
}


#=== FUNCTION ==================================================================
#        NAME: action_exec_error
# DESCRIPTION: Notify error execution
#===============================================================================
function action_exec_error() {
	log "$mac" "$hostname" "$action" "$script_path" "$exec_msg" 
}


##### CHECK PARAMETERS
check_params "$@"


##### EXEC ACTION
case "$action" in
	list)		action_list			;;
	get)		action_get			;;
	exec_ok)	action_exec_ok		;;
	exec_error)	action_exec_error	;;
esac
