#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT SERVER
#         FILE: lss-srv
#        USAGE: lss-srv -h hostname -M mac -r repository_name -a hostname|list|get|exec_ok|exec_error [-s script] [-m exec_message]
#
#  DESCRIPTION: Labadmin script server manager
#               Manage actions to do: check hostname-mac, list pending scripts, show script code, save exec status (exec_ok or exec_error)
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2022.06
#      CREATED: 28.06.2022
#=================================================================================== 

#===============================================================================
#  GLOBAL VARIABLES
#===============================================================================
readonly lss_path=$(dirname "$(readlink -f "$0")")			# LSS path
readonly lssinventory_path="${lss_path}/lss-inventory"		# lss-inventory path
source "${lss_path}/config"									# LOAD CONFIG VARIABLES



#=== FUNCTION ==================================================================
#        NAME: help
# DESCRIPTION: Show help and exit 
#  PARAMETERS:
#	$1	Exit code value
#===============================================================================
function help() {
	echo -e "Usage: $(basename "$0") -h hostname -M mac -r repository_name -a hostname|list|get|exec_ok|exec_error [-s script] [-m exec_message]"
	exit "$1"
}


#=== FUNCTION ==================================================================
#        NAME: check_params
# DESCRIPTION: Checks input parameters and load values
#  PARAMETERS:
#	$@	All parameter from command line
#===============================================================================
function check_params() {
	while getopts ":h:M:r:a:s:m:" option
	do		
		case $option in
		h)			
			readonly hostname="$OPTARG"
		;;
		M)
			readonly mac=$(echo "${OPTARG,,}" | tr "-" ":")
		;;
		r)
			readonly repository="$OPTARG"
			readonly repository_path="${repositories_path}/${repository}/"
		;;
		a)
			readonly action="$OPTARG"
		;;
		s)
			readonly script="$OPTARG"
		;;
		m) 
			readonly exec_msg="$OPTARG"
		;;
		?)
			echo "Incorrect option: $OPTARG"
			exit 2
		;;
	   esac
	done

	if [ $# -eq 0 ]; then
		help 1
	fi

	[ "$script" ] && readonly script_path="${repository_path}/${script}/"

	if [ ! "$hostname" ]; then
		echo "Hostname not present"
		help 2
#	elif [ ! "$mac" ] || [ "${mac#[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]}" ]; then
#		echo "Incorrect MAC or not present"
#		help 2
	elif [ ! "$repository" ]; then
	    echo "Repository not present"
		help 2 
	elif [ ! "$action" ]; then
	    echo "Action not present"
		help 2  
	elif  [[ "$action" != @(hostname|list|get|exec_ok|exec_error) ]]; then
	    echo "Invalid action value"
		help 2  
	elif [[ "$action" = @(get|exec_ok|exec_error) ]] && [ ! "$script" ]; then
		echo "Script not present"
		help 2  
	elif [ ! -d "$repositories_path" ] || [ ! -r "$repositories_path" ]; then
		echo "Cant access repositories path: $repositories_path"
		exit 2
	elif [ ! -d "$repository_path" ] || [ ! -r "$repository_path" ]; then
		echo "Cant access repository path: $repository_path"
		exit 2
	elif [ "$script" ] && ([ ! -d "$script_path" ] || [ ! -r "$script_path" ]); then
		echo "Cant access script path: $script_path"
		exit 2
	fi
}


#=== FUNCTION ==================================================================
#        NAME: log
# DESCRIPTION: write in ${script_path}/log file using format: 
#              [DATE TIME] [MAC] [HOSTNAME] [ACTION] EXEC_MSG
#			   and send mail log
#  PARAMETERS:
#		$1: mac
#		$2: hostname
#		$3: action
#		$4: script path
#		$5: exec_msg
#==========sp=====================================================================
function log() {
	local m="$1"				# mac
	local hn="$2"				# hostname
	local a="$3"				# action
    local sp="$4"				# script path
    local em="$5"				# exec message
	sn="$(basename "$sp")"		# script name

	local m2="[${m}] "
	local hn_width=8
	local hn2="[${hn^^}]$(seq -s" " 1 $(($hn_width-${#hn}))|tr -d "[0-9]") "
    local a_width=11
    local a2="[${a^^}]$(seq -s" " 1 $(($a_width-${#a}))|tr -d "[0-9]") "
	
	# Save file log
	echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] ${m2}${hn2}${a2}${em}" >> "${sp}/log"
	
	# Send mail log
	if [[ "${a,,}" = *error* ]]; then
		echo -e "Date: $(date "+%Y-%m-%d %H:%M:%S")\nMAC: ${m}\nHostname: ${hn}\nScript: ${sn}\nAction: ${a}\nError msg: ${em}" | mail -s "【script-server】【$sn】" -a "From: ${hn}<${hn}@carlos3.com>" "$log_mail"
	fi
}


#=== FUNCTION ==================================================================
#        NAME: action_hostname
# DESCRIPTION: Check if mac and hostname matches 
#===============================================================================
function action_hostname() {
	local hn=$("${lssinventory_path}" get-hostname "$mac")

	# Check error get-hostname
	if [ $? -ne 0 ]; then
		log "$mac" "$hostname" "hostname_error" "" "Error get-hostname for mac: $mac"
		exit 2
	fi

	# Check error match hostname
	if [ "$hostname" != "$hn" ]; then
		echo "$hn"
		log "$mac" "$hostname" "hostname_nomatch" "" "Incorrect hostname for $mac: $hostname -> $hn"
		exit 1
	fi
	
	exit 0
}



#=== FUNCTION ==================================================================
#        NAME: action_list
# DESCRIPTION: List all pending scripts for hostname according script name and select script
#===============================================================================
function action_list() {
	IFS2="$IFS"; IFS=$'\n'
	for s in $(ls "$repository_path"); do
		# Check if hostname match with script REGEX
		re=$(echo "$s" | cut -f1 -d" ")			# RE -> script dir name before first space character
		[[ "${hostname,,}" = ${re,,} ]] || continue		# If no match continue
		
		# Check if script is disabled
		[ ! -x "${repository_path}/${s}/" ] || [ ! -r "${repository_path}/${s}/" ] && continue		# If no perms continue

		# Check if hostname is selected
		bash "${repository_path}/${s}/select" "$hostname" || continue
		
		# List script
		echo "$s"
	done
	IFS="$IFS2"
}


#=== FUNCTION ==================================================================
#        NAME: action_get
# DESCRIPTION: Show script code
#===============================================================================
function action_get() {
	# Show script
	cat "${script_path}/script" 2>&1
	if [ $? -eq 0 ]; then
		log "$mac" "$hostname" "$action" "$script_path"
		exit 0 
	else
		log "$mac" "$hostname" "get_error" "$script_path"
		exit 1
	fi
}



#=== FUNCTION ==================================================================
#        NAME: action_exec_ok
# DESCRIPTION: Notify correct execution
#===============================================================================
function action_exec_ok() {
	log "$mac" "$hostname" "$action" "$script_path" "$exec_msg"
}


#=== FUNCTION ==================================================================
#        NAME: action_exec_error
# DESCRIPTION: Notify error execution
#===============================================================================
function action_exec_error() {
	log "$mac" "$hostname" "$action" "$script_path" "$exec_msg" 
}


##### CHECK PARAMETERS
check_params "$@"


##### EXEC ACTION
case "$action" 
	hostname)	action_hostname		;;
	list)		action_list			;;
	get)		action_get			;;
	exec_ok)	action_exec_ok		;;
	exec_error)	action_exec_error	;;
esac
